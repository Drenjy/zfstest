#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#

#
# File: BuildConfig.override.template
#
# Description:
#       This file contains entries that override values found in
#       BuildConfig.master. Table formats and names in this file are identical
#       to those found in BuildConfig.master. In the STC workspace this file
#       contains no table entries.
#
#       Tables are denoted in this file by %Table: followed by the name of the 
#       table, which itself is followed by a ":" and a list of column names. 
#       Any given table continues until the next %Table: directive or
#       the end of the file.
#
# Conventions:
#	Preceding and trailing white space are deemed irrelavent. All fields
#	are presumed to be a single string seperated from other fields by some
#	amount of white space. Consequently repeated mixtures of white space
#	characters (spaces and tabs) behave as a single separator.
#
#	*  
#		Denotes a default or wild card key value that matches any/all
#		keys.
#
#	{na}
#		Denotes a non-applicable field to be returned as a null
#		string.
#
#	These tables have a first match binding precedence.
#

#%Table: BuildModes:
#
# Description:
#       The table contains build modes supported by different architectures.
#       STF uses the table to check if there are unsupported build modes
#       defined in STF_SUITE_BUILD_MODES. If that happenes, unsupported build
#	modes are filter out.
#
#	Arch		Mode Name
#	====		=========

#%Table: ExecuteModes:
#
# Description:
#       The table contains build modes and configuration check routines for
#       different execute modes. 
#
# Notes:
#       The 1:1 mapping between execute mode and build mode in this table
#       is believed to be a bug(Please refer to CR 5056099). When 5056099
#       is fixed, all code should use ExecuteToBuildModes table for the 
#       mapping. The table will become obsolete or be renamed to contain 
#       only execution mode to configuration check routine mapping.
#
#	Mode		Build Mode	Configure Check
#	====		==========	===============

#%Table: ExecuteToBuildModes:
#
# Description:
#       The table contains builds modes for different execute modes. STF
#       will use the table, together with BinaryLocation table, to look 
#       up binaries executables for specific execute mode.
#
#       Execute Mode    Build Mode	
#	============	==========

#%Table: BinaryLocation: 
#
# Description:
#	This table contains the suffix to be appended to WS_ROOT/proto to
#	derive the name of the directory for installed binaries, aka the
#	proto area for a given build.  WS_ROOT is the workspace root.
#	
#	Mode.		Location
#	======		=========

#%Table: BuildTools: 
#
# Description:
#	 This table contains paths to tools and tool directives. Not all tools
#	 need to be listed, but there should be a good general default value
#	 for any tools that require no special directives based on machine
#	 architecture, memory, or file offset model.
#
#	*
#		Denotes a default key value that matches any/all keys. The
#		fewer of these used as keys in the table, the tighter they
#		bind. So, a line with only one * will bind tighter, and be
#		used instead of, a line that contains two.
#
#	{na}
#		Denotes a non-applicable field to be returned as a null
#		string.
#
#	Path represents a search path used to locate the tool. Its format is
#	identical to the PATH environment variable. All of the directories
#	named in the path will be searched for a file matching the name of the 
#	tool, and the absolute path of that file will be returned. So,
#	directory order has import.
#
#	Also, the directives will be evaluated prior to return. So if any
#	variable references exist in the text of the table, they will be
#	reduced. The format of all varaibles references must be Korn shell
#	compatible.
#
#	Mode	Tool	Alias	Path			Directives
#	======	======	======	======================= ==========
