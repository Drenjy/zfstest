#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#

source $env(STF_TOOLS)/include/stf.tcllib

if {![info exists env(MSTF_SYNC_PORT)]} {
	set env(MSTF_SYNC_PORT) 9100
}

#
# WARNING: All of the commands below require that MSTF_SYNC_SERV be set in
# the environment, or an error will be triggered.
#
# The following functions comprise the TCL api for multi-system support:
#    mstf_sync
#    mstf_getvar
#    mstf_setvar
#
# Setting MSTF_EXIT_ON_ERROR will cause these functions to immediately
# exit with STF_UNRESOLVED if any sync problems are detected.
#

#
# Wait for all test parts to reach the specified label before continuing.
#
# Returns $STF_PASS on success, $STF_UNRESOLVED on failure.
#
proc mstf_sync {label} {
	global STF_PASS STF_FAIL STF_UNRESOLVED env

	set chan [mstf_connect_syncserv]

	if {$chan == "no_channel" || \
	    [catch {puts $chan "sync $label"}] || \
	    [catch {flush $chan}]} {
		catch {close $chan}
		mstf_error mstf_sync "failed to write to sync server"
		return $STF_UNRESOLVED

	}
	if {[catch {gets $chan} result]} {
		catch {close $chan}
		mstf_error mstf_sync "failed to read from sync server"
		return $STF_UNRESOLVED
	}

	catch {close $chan}

	switch $result {
		go {
			return $STF_PASS
		}
		failed {
			mstf_error mstf_sync "sync failed at label: $label"
			return $STF_UNRESOLVED
		}
		default {
			mstf_error mstf_sync "bad reply to sync request"
			return $STF_UNRESOLVED
		}
	}
}

#
# Set a variables's value in the synchronization server.
#
# Returns $STF_PASS on success, $STF_UNRESOLVED on failure.
#
proc mstf_setvar {var_name value} {
	global STF_PASS STF_UNRESOLVED env

	set chan [mstf_connect_syncserv]

	if {$chan == "no_channel" || \
	    [catch {puts $chan "setv $var_name=$value"}] || \
	    [catch {flush $chan}]} {
		catch {close $chan}
		mstf_error mstf_setvar "failed to write to sync server"
		return $STF_UNRESOLVED
	}
	close $chan
	return $STF_PASS
}

#
# Get a variable's value from the synchronization server.
#
# Returns the variable's value on success, or an empty string on fail.
#
proc mstf_getvar {var_name} {
	global STF_UNRESOLVED env

	set chan [mstf_connect_syncserv]

	if {$chan == "no_channel" || \
	    [catch {puts $chan "getv $var_name"}] || \
	    [catch {flush $chan}]} {
		catch {close $chan}
		mstf_error mstf_getvar "failed to write to sync server"
		return ""
	}

	if {[catch {gets $chan} result]} {
		catch {close $chan}
		mstf_error mstf_getvar "failed to read from sync server"
		return ""
	}

	close $chan
	return $result
}


#
# ***** WARNING: Functions below this point are private!  *****
#

#
# This is a private function used to connect to the sync server.
#
proc mstf_connect_syncserv {} {
	global env

	if {![info exists env(MSTF_SYNC_SERV)]} {
		puts "mstf_connect_syncserv: MSTF_SYNC_SERV not set"
		return "no_channel"
	}
	if {[catch {socket $env(MSTF_SYNC_SERV) $env(MSTF_SYNC_PORT)} chan]} {
		puts "mstf_connect_syncserv: failed to connect to sync server"
		return "no_channel"
	}

	return $chan
}

#
# Error handling function.  Exits if MSTF_EXIT_ON_ERROR is set in the
# environment.
#
proc mstf_error {func_name err_string} {

	global env STF_UNRESOLVED

	puts stderr "Error: $func_name: $err_string"

	if {[info exists env(MSTF_EXIT_ON_ERROR)] && \
	    $env(MSTF_EXIT_ON_ERROR) == 1} {
		exit $STF_UNRESOLVED
	}
}
